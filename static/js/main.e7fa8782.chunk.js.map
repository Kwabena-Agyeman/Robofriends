{"version":3,"sources":["Components/SearchBox.jsx","Components/Card.jsx","Components/CardList.jsx","Components/Scroll.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["SearchBox","searchChange","this","props","className","type","placeholder","onChange","React","Component","Card","id","name","email","src","alt","CardList","robots","map","user","Scroll","style","overflowY","border","height","children","App","onSearchChange","e","setState","searchfield","target","value","state","fetch","then","Response","json","users","fliteredRobots","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAmBeA,E,4JAhBb,WAAU,IACAC,EAAiBC,KAAKC,MAAtBF,aACR,OACE,gCACE,uBACEG,UAAU,sCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUN,IALd,W,GAJkBO,IAAMC,WCefC,E,4JAdb,WAAU,IAAD,EACqBR,KAAKC,MAAzBQ,EADD,EACCA,GAAIC,EADL,EACKA,KAAMC,EADX,EACWA,MAClB,OACE,sBAAKT,UAAU,sDAAf,UACE,qBAAKU,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,WACpD,gCACE,6BAAKH,IACL,4BAAIC,c,GARKL,IAAMC,WCqBVO,E,4JAnBb,WAAU,IACAC,EAAWf,KAAKC,MAAhBc,OACR,OACE,8BACGA,EAAOC,KAAI,SAACC,GACX,OACE,cAAC,EAAD,CAEER,GAAIQ,EAAKR,GACTC,KAAMO,EAAKP,KACXC,MAAOM,EAAKN,OAHPM,EAAKR,a,GARDH,IAAMC,WCedW,E,4JAfb,WACE,OACE,qBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,mBACRC,OAAQ,SAJZ,SAOGtB,KAAKC,MAAMsB,e,GAVCjB,IAAMC,WC2CZiB,G,wDApCb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXhB,OAAQ,GACRa,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEZ,OAAQqB,S,oBAO7C,WAAU,IAAD,OACDC,EAAiBrC,KAAK+B,MAAMhB,OAAOuB,QAAO,SAACrB,GAC/C,OAAOA,EAAKP,KACT6B,cACAC,SAAS,EAAKT,MAAMH,YAAYW,kBAErC,OACE,sBAAKrC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWH,aAAcC,KAAKyB,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUV,OAAQsB,a,GA9BV/B,IAAMC,YCITkC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,8BACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e7fa8782.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass SearchBox extends React.Component {\r\n  render() {\r\n    const { searchChange } = this.props;\r\n    return (\r\n      <div>\r\n        <input\r\n          className=\"tc pa3 ba b--green bg-lightest-blue\"\r\n          type=\"search\"\r\n          placeholder=\"search robots\"\r\n          onChange={searchChange}\r\n        />\r\n        ;\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nclass Card extends React.Component {\r\n  render() {\r\n    const { id, name, email } = this.props;\r\n    return (\r\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nclass CardList extends React.Component {\r\n  render() {\r\n    const { robots } = this.props;\r\n    return (\r\n      <div>\r\n        {robots.map((user) => {\r\n          return (\r\n            <Card\r\n              key={user.id}\r\n              id={user.id}\r\n              name={user.name}\r\n              email={user.email}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nclass Scroll extends React.Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          overflowY: \"scroll\",\r\n          border: \"10px solid black\",\r\n          height: \"800px\",\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\nimport SearchBox from \"./Components/SearchBox\";\r\nimport CardList from \"./Components/CardList\";\r\nimport Scroll from \"./Components/Scroll\";\r\n// import { robots } from \"./Components/Robots\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((Response) => Response.json())\r\n      .then((users) => this.setState({ robots: users }));\r\n  }\r\n\r\n  onSearchChange = (e) => {\r\n    this.setState({ searchfield: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const fliteredRobots = this.state.robots.filter((user) => {\r\n      return user.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchfield.toLowerCase());\r\n    });\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <CardList robots={fliteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nimport \"tachyons\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}